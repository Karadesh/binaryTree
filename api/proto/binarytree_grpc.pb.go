// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: binarytree.proto

package binaryTree

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BinaryTree_GenerateRequest_FullMethodName = "/api.BinaryTree/GenerateRequest"
)

// BinaryTreeClient is the client API for BinaryTree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryTreeClient interface {
	GenerateRequest(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error)
}

type binaryTreeClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryTreeClient(cc grpc.ClientConnInterface) BinaryTreeClient {
	return &binaryTreeClient{cc}
}

func (c *binaryTreeClient) GenerateRequest(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, BinaryTree_GenerateRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryTreeServer is the server API for BinaryTree service.
// All implementations must embed UnimplementedBinaryTreeServer
// for forward compatibility
type BinaryTreeServer interface {
	GenerateRequest(context.Context, *GenRequest) (*GenResponse, error)
	mustEmbedUnimplementedBinaryTreeServer()
}

// UnimplementedBinaryTreeServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryTreeServer struct {
}

func (UnimplementedBinaryTreeServer) GenerateRequest(context.Context, *GenRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRequest not implemented")
}
func (UnimplementedBinaryTreeServer) mustEmbedUnimplementedBinaryTreeServer() {}

// UnsafeBinaryTreeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryTreeServer will
// result in compilation errors.
type UnsafeBinaryTreeServer interface {
	mustEmbedUnimplementedBinaryTreeServer()
}

func RegisterBinaryTreeServer(s grpc.ServiceRegistrar, srv BinaryTreeServer) {
	s.RegisterService(&BinaryTree_ServiceDesc, srv)
}

func _BinaryTree_GenerateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryTreeServer).GenerateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryTree_GenerateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryTreeServer).GenerateRequest(ctx, req.(*GenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryTree_ServiceDesc is the grpc.ServiceDesc for BinaryTree service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryTree_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BinaryTree",
	HandlerType: (*BinaryTreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRequest",
			Handler:    _BinaryTree_GenerateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binarytree.proto",
}
